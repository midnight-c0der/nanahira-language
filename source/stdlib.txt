//the code here is like, really weird due to the current limitations of the language

void* malloc(uint64 bytes) {
	asm("mov rax, 9");
	asm("mov rdi, 0");
	asm("mov rsi, r8");
	asm("mov rdx, 3");
	asm("mov r10, 34");
	asm("mov r8d, -1");
	asm("mov r9, 0");
	asm("syscall");

	return;
}

uint64 strlen(char* str) {
	uint64 index = 0;
	while (str[index] != 0) {
		index++;	
	}
	
	return index;
}

char* numberToString(uint32 number) {
	char* digits = malloc(10);

	uint8 digitIndex = 0;
	while (number > 0) {
		uint8 digit = number % 10;
		digits[9 - digitIndex] = digit + 48;
		number = number / 10;
		
		digitIndex = digitIndex + 1;
	}	
	
	return digits + (10 - digitIndex);
}

void print(char* str) {
	uint64 len = strlen(str);

	asm("push rax");
	asm("mov rax, 1");
	asm("mov rdi, 1");
	asm("mov rsi, r8");
	asm("pop rdx");	
	asm("syscall");
	
	return;
}

void print_character(char c) {
	char* str = malloc(2);
	str[0] = c;
	str[1] = 0;

	print(str);

	return;
}

void printf(char* format, ...) {
	uint64 len = strlen(format);
	uint8 formatIndex = 0;

	uint8 isFormat = 0;

	for (uint64 i = 0; i < len; i++) {
		if (isFormat) {
			if (format[i] == 'd') {
				char* text = numberToString(vararg(formatIndex));
				print(text);
			}

			formatIndex++;
			isFormat = 0;
		} else {
			if (format[i] == '%') {
				isFormat = 1;
			} else {
				print_character(format[i]);
			}
		}
	}

	return;
}

